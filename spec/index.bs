
<h1>Verifiable Credentials JSON Schema Specification</h1>
<pre class='metadata'>
Title: Verifiable Credentials JSON Schema Specification
Status: w3c/CG-DRAFT
Prepare for TR: true
TR: https://w3c-ccg.github.io/vc-json-schemas/
ED: https://w3c-ccg.github.io/vc-json-schemas/
!CG-DRAFT: <a href="https://w3c-ccg.github.io/vc-json-schemas/">https://w3c-ccg.github.io/vc-json-schemas/</a>

Shortname: vcjsonschemaspec
Level: 1

Editor: Gabe Cohen, w3cid 116851, gabe.cohen@hey.com
Editor: Orie Steele, w3cid 109171, [Transmute](https://www.transmute.industries/), orie@transmute.industries

group: ccg
Issue Tracking: GitHub https://github.com/w3c-ccg/vc-json-schemas/issues
!Tests: <a href="https://github.com/w3c-ccg/vc-json-schemas">vc json schema spec tests</a> (<a href="https://github.com/w3c-ccg/vc-json-schemas">ongoing work</a>)
Text Macro: FALSE <code>false</code>
Text Macro: PII personally identifying information
Text Macro: RP Relying Party
Text Macro: RPS Relying Parties
Text Macro: INFORMATIVE <em>This section is not normative.</em>
Text Macro: TRUE <code>true</code>
Ignored Vars: op, alg, type, algorithm

Abstract: The [[VC_DATA_MODEL]] specifies the models used for Verifiable Credentials and
  Verifiable Presentations, and explains the relationships between three parties:
  <i>issuer</i>, <i>holder</i>, and <i>verifier</i>. A critical piece of infrastructure out of the
  scope of those specifications is the <b>Credential Schema</b>. This specification provides
  a mechanism to express a Credential Schema and the protocols for evolving the schema.

Boilerplate: omit conformance, omit feedback-header, omit abstract-header
Markup Shorthands: css off, markdown on
</pre>

<style type="text/css">
body {
    counter-reset: table;
}

/* For some reason, doing the counter-increment on the figcaption like Bikeshed does with figures does not seem to work here. */
figure.table {
    counter-increment: table;
}

figure.table figcaption {
    counter-increment: none;
}

figure.table figcaption:not(.no-marker)::before {
    content: "Table " counter(table) " ";
}

figure.table .overlarge {
    max-width: 50em;
}

.figure-num-following::before {
    counter-increment: figure;
    content: counter(figure)
}

.figure-num-following::after {
    counter-increment: figure -1;
    content: ""
}

.table-ref-previous::before {
    content: counter(table);
}

.table-ref-following::before {
    counter-increment: table;
    content: counter(table);
}

.table-ref-following::after {
    counter-increment: table -1;
    content: "";
}
</style>

# Introduction # {#intro}
This specification provides a mechanism for the use of verifiable credentials in a highly scalable, secure, and verifiable way. A large part of the integrity of a verifiable credential is how to structure the credential so that all three parties — issuer, holder, verifier — may have a singular mechanism of trust into what they are using. We call that document a [=Credential Schema=].

This specification provides a standardized way of creating [=Credential Schemas=] to be used in credentialing platforms, how to version them, and how to read them. Credential Schemas may apply to any portion of a Verifiable Credential. Multiple JSON Schemas may back a single Verifiable Credential, e.g. a schema for the `credentialSubject` and another for other credential properties.

# Terminology # {#terminology}

: <dfn>id</dfn>
:: A locally unique identifier to locate the schema on a given data storage medium (e.g. a database, ledger, distributed file store). Each credential schema has its own unique identifier, and each version of a schema is required to have its own unique identifier. <br/> <br/> This identifier is a [Uniform Resource Identifier](https://www.rfc-editor.org/rfc/rfc3986) that <i>may</i> contain information pertaining to the author and version of the schema. For example, if the author had a DID like <pre>did:example:abcdefghi</pre> a possible schema ID the author created would have an identifier such as: <pre>did:example:abcdefghi;id=17de181feb67447da4e78259d92d0240;version=1.0</pre>

Version and authorship <i>may</i> be useful to include in a schema identifier as they provide crucial information about the schema without forcing a lookup. Resovling the schema, however, is the <i>recommended approach</i> to gaining an authoritative information about a schema and its metadata.

: <dfn>Credential Schema</dfn>
:: The data template for a credential. Refers to the entirety of a [=Credential Schema=], including both the [=Metadata=] and [=JSON Schema=]. The term may refer to a document either with, or without a [=proof=].

<pre class="example" highlight="json">
{
  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
  "version": "1.0",
  "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=1.0",
  "name": "Email",
  "author": "did:example:MDP8AsFhHzhwUvGNuYkX7T",
  "authored": "2021-01-01T00:00:00+00:00",
  "schema": {
    "$id": "email-schema-1.0",
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "description": "Email",
    "type": "object",
    "properties": {
      "emailAddress": {
        "type": "string",
        "format": "email"
      }
    },
    "required": ["emailAddress"],
    "additionalProperties": false
  }
}
</pre>


: <dfn>Metadata</dfn>
:: Top-level information on a [=Credential Schema=]. Pieces of data wrapping the [=JSON Schema=] to provide further context about the schema.

<pre class="example" highlight="json">
{
  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
  "version": "1.0",
  "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db",
  "name": "Email",
  "author": "did:example:MDP8AsFhHzhwUvGNuYkX7T",
  "authored": "2021-01-01T00:00:00+00:00"
}
</pre>

: <dfn>proof</dfn>
:: A digital signature over the [=Credential Schema=] for the sake of claiming authorship. A piece of [=Metadata=]. Most often done using [[Linked_Data_Proofs]].

: <dfn>type</dfn>
:: It is important in software systems for machines to understand the context of what a document is. In credential schemas this is declared in the <b>type</b> field. This field resolves to a JSON schema with details about the <b>schema metadata</b> that applies to the schema. A piece of [=Metadata=].

: <dfn>version</dfn>
:: Denotes the revision of a given Credential Schema.

: <dfn>name</dfn>
:: A human-readable name for the schema. A piece of [=Metadata=].

: <dfn>author</dfn>
:: [[DID]] of the identity which authored the credential schema. A piece of [=Metadata=].

: <dfn>authored</dfn>
:: [[RFC-3339]] date on which the schema was created. A piece of [=Metadata=].

: <dfn>JSON Schema</dfn>
:: [=schema=]

: <dfn>schema</dfn>
:: This is where the Credential Schema data fields are defined as a valid [[JSON_SCHEMA]]. A piece of [=Metadata=].

<pre class="example" highlight="json">
{
    "$id": "email-schema-1.0",
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "description": "Email",
    "type": "object",
    "properties": {
        "emailAddress": {
            "type": "string",
            "format": "email"
        }
    },
    "required": ["emailAddress"],
    "additionalProperties": false
}
</pre>

: <dfn>credential</dfn>
:: [=Verifiable Credential=]

: <dfn>Verifiable Credential</dfn>
:: See [[VC_DATA_MODEL]]

# Standards & Compliance # {#standards_compliance}

The [[VC_DATA_MODEL]] specifies the models used for Verifiable Credentials and Verifiable Presentations, and while this spec attempts to align closely to the W3C model, it should <b>NOT</b> be assumed this specification is fully compliant at the time of this writing. Ultimately, we would like to comply with the W3C specification; however, due to the fact that the W3C specification is under active development and is subject to change, we have diverged from that model with several "forks" that are fully outlined in this specification.

# Formatting # {#formatting}

The [[VC_DATA_MODEL]] provides examples in the JSON Linked Data interchange format. The specification allows for other formats, such as standard JSON with JSON Schema but provides limited examples. In the [credentialSchema section](https://www.w3.org/TR/vc-data-model/#data-schemas), <i>JSON-SCHEMA-2018</i> validation is noted explicitly. This specification does not use [[JSON-LD]]. If it becomes evident that it would be useful to include [[JSON-LD]] or another format that decision would be made in a revisal draft at a later date.

The Verifiable Credentials data model relies heavily upon standard JSON with validation provided by [[JSON_SCHEMA]]. The data model embeds [[JSON_SCHEMA]] documents inside a larger document that contains useful metadata about a given credential schema.

# Specification # {#specification}

## Overview ## {#overview}

The <b>Credential Schema</b> is a document that is used to guarantee the structure, and by extension the semantics, of the set of claims comprising a Verifiable Credential. A shared Credential Schema allows all parties to reference data in a known way.

A schema can be viewed from four perspectives: the author, issuer, verifier and holder.

<b>Author:</b> An author creates a schema as a blueprint for a verifiable credential, specifying the shape and format of the data in such a credential.

<b>Issuer:</b> Issuers utilize schemas to provide structure and meaning to the data they issue as verifiable credentials. By using schemas, issuers contribute to a credentialing ecosystem, and promote the use and adoption of data standards.

<b>Verifier:</b> A verifier requesting data needs to do so with knowledge of the credential shapes. Credential Schemas allow a Verifier to request data knowing that an issuer has generated a Credential in a well-known format, and that a holder can accurately respond to such a request.

<b>Holder:</b> Holders, or those who are the subject of credential issuance, can make sense of the data they own – values – by viewing it against a schema—keys. When data is requested from them by referencing a [=Credential Schema=], this known structure allows the holder to return the data specifically requested by the verifier.

### Guarantees ### {#guarantees}

With adherance to the specification, the following guarantees can be made about a schema:

- A schema is <i>versionable</i> and it can evolve via new versions over time.
- A schema is available for any issuer to use and any verifier, or other platform member to <i>read</i>.
- A schema always guarantees the structure of a credential. The described structure can be used by the Verifier to understand what data the Holder holds. There is no requirement for the Verifier to validate sent data against the schema since this sent data may only be partial, for example in event of a Presentation Request only requiring a singular field from a credential though there may be multiple fields defined in the schema.

### Storage ### {#storage}

[=Credential Schemas=] are created and made available as immutable objects on any number of storage mediums such as a distributed ledger, traditional database, or decentralized file storage. The same schema <i>may</i> be replicated across multiple file stores with the same identifier. Immutability is key to enable consistent sources of truth for credential issuance. Schemas can evolve by creating new versions.

### Versioning ### {#versioning}

Schemas are versioned via a [=version=] property. The [=version=] denotes the revision of a particular schema for a given storage medium. 

Authors and Issuers care about versioning to track advancements and changes over time both for formatting changes (e.g. supporting [[JSON_SCHEMA]] [draft-bhutton-json-schema-00](https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00) as opposed to [Draft 7](https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-01)) as well as field changes (e.g. adding a new required field) as a schema evolves to its latest form. Holders care about versioning to know where and how their credential can be used. Similarly, Verifiers care about versioning to know which data, or schema versions they should accept in their systems.

Gudelines for versioning can be found in the [Versioning Guidelines section of this document](#versioning_guidelines).

### Processing ### {#processing}

There is wide support for JSON Schema processing and [[JSON_SCHEMA_IMPLMENTATIONS]] can be found in many programming languages.

#### Acceptance #### {#processing_acceptance}

A system may choose to accept schemas based on multiple different criteria: storage location, authorship, identifier, version, etc. 

The language by which a schema, or set of schemas are accepted by Credentialing Systems is out of scope of this document. It is advisable that such a language is flexible to accomodate important criterion of a schema, such as supporting version ranges with a common property, or enforcing authorship from a known author with a valid authentication mechanism (i.e. [=proof=]).

#### Validation #### {#processing_validation}

What determines the validity of a Credential is up to the <i>verifier</i> for that given Credential. Validity could mean a a valid [=proof=], a valid [=proof=] and validation against a given [=schema=], or other set of conditions.

Validation of a given Credential against its schema is to be performed according to the [[JSON_SCHEMA_VALIDATION]] specification.

## Credential Schema Definition ## {#credential_schema_definition}

This section provides the [[JSON_SCHEMA]] definition for [=Credential Schema=] along with an example of a [=Credential Schema=] for an Email [=Verifiable Credential=].

<b>JSON Schema</b>
<pre highlight="json">
{
  "$id": "credential-schema-2.0",
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "description": "JSON Schema for W3C Verifiable Credential JSON Schema",
  "type": "object",
  "properties": {
    "type": {
      "type": "string"
    },
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+$"
    },
    "id": {
      "type": "string"
    },
    "name": {
      "type": "string"
    },
    "author": {
      "type": "string"
    },
    "authored": {
      "type": "string"
    },
    "schema": {
      "type": "object",
      "properties": {
        "$id": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "properties": {
          "type": "object"
        },
        "required": {
          "type": "array",
          "items": [
            {
              "type": "string"
            }
          ]
        },
        "additionalProperties": {
          "type": "boolean"
        }
      },
      "required": [
        "$id",
        "$schema",
        "description",
        "type",
        "properties",
        "required",
        "additionalProperties"
      ]
    },
    "proof": {
      "type": "object"
    }
  },
  "required": [
    "type",
    "version",
    "id",
    "name",
    "author",
    "authored",
    "schema"
  ]
}
</pre>

### Metadata ### {#credential_schema_definition_metadata}

The properties, in order, before the JSON Schema document, embedded into the [=JSON Schema=] are as follows:

1. [=type=]

1. [=version=]

1. [=id=]

1. [=name=]

1. [=author=]

1. [=authored=]


<pre class="example" highlight="json">
{
  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
  "version": "1.0",
  "id": "06e126d1-fa44-4882-a243-1e326fbe21db",
  "name": "Email",
  "author": "did:example:MDP8AsFhHzhwUvGNuYkX7T",
  "authored": "2021-01-01T00:00:00+00:00"
}
</pre>

### Schema ### {#credential_schema_definition_schema}

This is where the [=Credential Schema=] data fields are defined as a valid [=JSON Schema=] document.

<pre class="example" highlight="json">
{
 "$schema": "https://json-schema.org/draft/2019-09/schema",
 "description": "Email",
 "type": "object",
 "properties": {
   "emailAddress": {
       "type": "string",
       "format": "email"
   }
 },
 "required": ["emailAddress"],
 "additionalProperties": false
}
</pre>

### Proof ### {#credential_schema_definition_proof}

Any [=Credential Schema=] may be authenticated using [[Linked_Data_Proofs]].

<pre class="note">
  Example and more detail needed.
</pre>

# Versioning Guidelines # {#versioning_guidelines}

This section applies to [=version=] properties of the metadata.

Versioning is defined as <b>MODEL.REVISION</b> where <b>MODEL</b> is a breaking change and <b>REVISION</b> is non-breaking. The version is contained within the schema identifier.

With schemas we are concerned with a new schema and backwards compatibility of existing data on an older [=schema=].

<b>MODEL</b> Updating this number tells the end user that this version breaks the schema for ANY interaction with an older [=schema=]. For processing, if a holder presents a [=credential=] built from a [=schema=] with version 1.0, and the platform is looking for version 2.0, it is <i>not able</i> to parse ANY information.

<b>REVISION</b> Updating this number tells the end user that this version <i>may</i> prevent interactions with parts of the [=schema=]. For processing, if a holder presents a credential built from a schema with version 1.0 and the platform is looking for version 1.5, there are likely to be SOME fields incompatible with the expected [=credential=].

## Revision ## {#revision}

The addition or removal of an <b>optional</b> field is what constitutes a <b>REVISION</b>. Adding or removing an optional field does not break historical data in a [=schema=], and in a claims exchange protocol, missing optional fields can be ignored.

<pre class="example" highlight="json">
{
 "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
 "version": "1.0",
 "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=1.0",
 "name": "Email",
 "author": "did:example:MDP8AsFhHzhwUvGNuYkX7T",
 "authored": "2018-01-01T00:00:00+00:00",
 "schema": {
   "$id": "email-schema-1.0",
   "$schema": "https://json-schema.org/draft/2019-09/schema",
   "description": "Email",
   "type": "object",
   "properties": {
      "emailAddress": {
      "type": "string",
      "format": "email"
    }
   },
   "required": ["emailAddress"],
   "additionalProperties": false
 }
}
</pre>

In this example we once again reference the email schema, but this time we add an optional field <i>backupEmailAddress</i>. Notice how this would not break the claims exchange because the field is optional.

<pre class="example" highlight="json">
{
 "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
 "version": "1.1",
 "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=1.1",
 "name": "Email",
 "author": "did:example:abc123",
 "authored": "2018-01-01T00:00:00+00:00",
 "schema": {
   "$id": "email-schema-1.1",
   "$schema": "https://json-schema.org/draft/2019-09/schema",
   "description": "Email",
   "type": "object",
   "properties": {
    "emailAddress": {
      "type": "string",
      "format": "email"
    },
    "backupEmailAddress": {
      "type": "string",
      "format": "email"
    }
   },
   "required": ["emailAddress"],
   "additionalProperties": false
 }
}
</pre>

## Model ## {#model}

When a schema breaks backwards compatiblity it is considered a model change. The most common case of a <b>MODEL</b> change is the addition or subtraction of a required field. It is important to note that for the change of a key name on a required field constitutes a <b>MODEL</b> change as this introduces a breaking change, adding a required field.

An example of this rule is when the <i>additionalProperties</i> field's value changes. Changing <i>additionalProperties</i> from <i>false</i> to <i>true</i> OR from <i>true</i> to <i>false</i> constitutes a breaking change, necessitating a <b>MODEL</b> increment.

<pre class="example" highlight="json">
{
 "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
 "version": "1.1",
 "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=1.1",
 "name": "Email",
 "author": "did:example:MDP8AsFhHzhwUvGNuYkX7T",
 "authored": "2018-01-01T00:00:00+00:00",
 "schema": {
   "$id": "email-schema-1.1",
   "$schema": "https://json-schema.org/draft/2019-09/schema",
   "description": "Email",
   "type": "object",
   "properties": {
    "emailAddress": {
      "type": "string",
      "format": "email"
    },
    "backupEmailAddress": {
      "type": "string",
      "format": "email"
    }
   },
   "required": ["emailAddress"],
   "additionalProperties": false
 }
}
</pre>

This time our credentialing requirements for our email schema have changed and we need to attach a `firstName` for verification. This is a <i>required</i> field, so we know it is a <b>MODEL</b> change.

<pre class="example" highlight="json">
{
 "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
 "version": "2.0",
 "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=2.0",
 "name": "Email",
 "author": "did:example:MDP8AsFhHzhwUvGNuYkX7T",
 "authored": "2018-01-01T00:00:00+00:00",
 "schema": {
   "$id": "email-schema-2.0",
   "$schema": "https://json-schema.org/draft/2019-09/schema",
   "description": "Email",
   "type": "object",
   "properties": {
    "emailAddress": {
      "type": "string",
      "format": "email"
    },
    "firstName": {
      "type": "string"
    },
    "backupEmailAddress": {
      "type": "string",
      "format": "email"
    }
   },
   "required": ["emailAddress", "firstName"],
   "additionalProperties": false
 }
}
</pre>

# Extensibility # {#extensibility}

By introducing a [=version=] field we allow the [=credential schema=] to become extensible. Properties such as <i>derivedFrom</i> could reference a schema that a new schema is built on top of. Similarly, platform-utility features such as searchability could be provided by adding a tags array that contains categorization and classification information for a [=schema=].

These are just a few examples that illustrate the flexibility of the proposed model. It can be extended to support a wide variety of use-cases and make the burden on issuance and verification simpler by facilitating the development of higher-level tooling.

# Examples # {#examples}

## Verifiable Credentials ## {#vc_example}

We define an Email schema as the basis for a credential.

<pre class="example" highlight="json">
{
  "type": "https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json",
  "version": "1.0",
  "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=1.0",
  "name": "Email",
  "author": "did:example:MDP8AsFhHzhwUvGNuYkX7T",
  "authored": "2021-01-01T00:00:00+00:00",
  "schema": {
    "$id": "email-schema-1.0",
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "description": "Email",
    "type": "object",
    "properties": {
      "emailAddress": {
        "type": "string",
        "format": "email"
      }
    },
    "required": ["emailAddress"],
    "additionalProperties": false
  }
}
</pre>

The example references a [=Credential Schema=] with an identifier <b>did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=1.0</b> inside of a Verifiable Credential following the [[VC_DATA_MODEL]]. The example is adapted from <a href="https://w3c.github.io/vc-data-model/#example-18-usage-of-the-credentialschema-property-to-perform-json-schema-validation">Example 18</a> in the specification.

<pre class="example" highlight="json">
{
  "@context": [
    "https://www.w3.org/2018/credentials/v1",
    "https://www.w3.org/2018/credentials/examples/v1"
  ],
  "id": "http://example.edu/credentials/1872",
  "type": ["VerifiableCredential", "EmailCredential"],
  "issuer": "https://example.com/issuers/565049",
  "issuanceDate": "2021-01-01T00:00:00Z",
  "credentialSchema": {
    "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T;id=06e126d1-fa44-4882-a243-1e326fbe21db;version=1.0",
    "type": "JsonSchemaValidator2018"
  },
  "credentialSubject": {
    "id": "did:example:MDP8AsFhHzhwUvGNuYkX7T",
    "emailAddress": "first.last@example.com"
    }
  },
  "proof": { ... }
}
</pre>

The ID of the [=Credential Schema=] is visible in the <b>credentialSchema</b> section of the credential, and provides information about the schema's author and version. The type of <b>JsonSchemaValidator2018</b> refers to a [[JSON-LD]] type providing information on how the data in the <b>credentialSubject</b> should be validated against the provided schema.

# Drawbacks # {#drawbacks}

Within a credentialing ecosystem, relying heavily upon [[JSON_SCHEMA]] makes data shapes for credentials consistent, and could enable an ecosystem with many similar schemas with slight changes (naming, capitalization). Without proper oversight or authoritative schemas to limit duplication or misuse, utilization of [[JSON_SCHEMA]] could lead to a poor user experience. At a higher, platform level tooling can be provided to minimize confusion and promote reuse.

Within the broader Credentialing Ecosystem, interoperability could be more difficult if the wider community adopts [[JSON-LD]] without advocating for pairing with [[JSON_SCHEMA]] based schemas or credentials. This issue can mainly be side-stepped with the metadata we include –– the <i>Credential Schema</i> –– since this model is flexible to change. A new [=version=] could be introduced that supports [[JSON-LD]] and removes support for [[JSON_SCHEMA]]. A drawback here is the requirement that all schemas have this piece of metadata, which itself is versioned and evolvable.

A flip side to drawbacks of the usage of [[JSON_SCHEMA]] is that there is a plethora of documentation, libraries, and usage of [[JSON_SCHEMA]] across programming languages and the web.

# Alternatives # {#alternatives}

[[JSON-LD]] is the most prominent alternative, though it does not provide the same functionality in regards to strict data validation. It has been suggested that both [[JSON_SCHEMA]] and [[JSON-LD]] can work symbiotically in the credentialing ecosystem: [[JSON-LD]] providing semantic interoparability, and [[JSON_SCHEMA]] providing static validation.

# Security & Privacy Considerations # {#security_and_privacy_considerations}

Privacy & security considerations mainly revolve around Personally Identifiable Information (PII) leaks in schemas. Any field which a user could enter data is a potential area for personally identifiable information. When implementing systems that support the storage and querying of schemas relevant data privacy laws and regulations must be taken into account.

# Interoperability # {#interoperability}

The primary concern of this specification is to facilitate an ecosystem in which [=Verifiable Credential=]s can be issued and used. To be interoperable, additional schema types may need to be supported. Given the investment into a robust versioning strategy of [Credential Schema Metadata](#metadata) interoperability with the current design is less of a concern.

A goal of publishing this document is to promote others to adopt this schema philosophy. It also opens the door for providing feedback and collaborative contribution to developing primitives that would lead to a successful verifiable ecosystem.

<pre class="biblio">
{
  "VC_DATA_MODEL": {
    "href": "https://www.w3.org/TR/vc-data-model/",
    "title": "Verifiable Credentials Data Model 1.0",
    "publisher": "W3C"
  },
  "RFC-3339": {
    "href": "https://tools.ietf.org/html/rfc3339",
    "title": "Date and Time on the Internet: Timestamps",
    "publisher": "IETF"
  },
  "JSON_SCHEMA": {
    "href": "https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00",
    "title": "JSON Schema Bhutton Draft 00",
    "publisher": "json-schema-org"
  },
  "JSON_SCHEMA_VALIDATION": {
    "href": "https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-validation-00",
    "title": "JSON Schema Validation: A Vocabulary for Structural Validation of JSON draft-bhutton-json-schema-validation-00",
    "publisher": "json-schema-org"
  },
  "DID": {
    "href": "https://w3c.github.io/did-core/",
    "title": "Decentralized Identifiers (DIDs) v1.0",
    "publisher": "W3C"
  },
  "JSON-LD": {
    "href": "https://w3c.github.io/json-ld-syntax/",
    "title": "JSON-LD 1.1: A JSON-based Serialization for Linked Data",
    "publisher": "W3C"
  },
  "LINKED_DATA_PROOFS": {
    "href": "https://w3c-ccg.github.io/ld-proofs/",
    "title": "Linked Data Proofs 1.0",
    "publisher": "W3C"
  },
  "JSON_SCHEMA_IMPLMENTATIONS": {
    "href": "https://json-schema.org/implementations.html",
    "title": "JSON Schema Implementations",
    "publisher": "json-schema-org"
  }
}
</pre>
